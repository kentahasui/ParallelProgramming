Kenta Hasui
CS 377 - Parallel Programming
Assignment 1 Report
        I had a lot more fun working on this assignment than I expected. Although the program itself wasn’t too hard, it was nice to learn about C programming. I had forgotten how exciting coding-heavy classes were, especially ones with a new language. 
        I started by figuring out what vim was all about. I was initially skeptical: why couldn’t I use textEdit? Why can’t I use my mouse in vim? Why is it so hard to read? But I trudged on through the vimtutor tutorial, and also played the first level of VimAdventures. And as I kept playing around with the options, I started to enjoy it more and more. I no longer had to take my hands off of the keyboard to navigate, and my typing became a bit more fluid. I was beginning to see why people like it so much. When I figured out how to edit my vimrc file, I fell in love. I set the indentation to “cindent”, and set the indent and tab sizes to 2. I then changed the color scheme to a pretty one with nice colors, and it was like I was using an IDE! 
        Then I actually started the programming assignment. For this assignment, I wasn’t sure if I had to create three different find_max functions or three different seqmax.c programs. I decided to go with the latter, and created three different C files to demonstrate the three different ways to deal with arrays. I taught myself some really basic C++ in the past, so I at least remembered how to compile the .c (and the .cpp) files. But I had never learned the ins and outs of pointers, addresses, passing by value, and passing by reference. 
        This assignment was a learning process for sure. At first, I kept getting warning messages when I compiled my C files. I eventually realized that you needed to declare functions at the top of the file before defining them later on. It also took a lot of testing and tweaking to figure out exactly how the scanf function worked, and to figure out that I had to pass in the address of a variable as the second argument. When I started using pointers and pointer arithmetic, I had to deal with segmentation faults (this was cool because I felt really official complaining about “seg faults”). And I had never even heard of dynamic memory allocation before this assignment! Fortunately there were good examples of how to use the malloc() and calloc() functions in various online tutorials. I wish the Kernighan book had a better description of how to use those functions, instead of giving us an in-depth explanation of how they can be implemented. 
        When I finally had my programs compiled and running, I felt great! There are still parts of the language that I’d like to learn, such as structures, pointers to multidimensional arrays, pointers to structures, pointers to functions, and all of the data structures that can be accessed through the C libraries. However, this first assignment definitely taught me a lot about Vim and C, and I am excited about all that I will learn going forward in this class.